# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
.DS_Store
dist
dist-ssr
coverage
*.local

/cypress/videos/
/cypress/screenshots/

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vue</title>
  </head>
  <body>
    <div id="app">
      <h1>Sign in</h1>
      <input v-model="var1" placeholder="email" />
      <br />
      <input v-model="var2" placeholder="password" />
      <br />
      <button @click="login()">Login</button>
      <button @click="logout()">Logout</button>

      <h1>Channel</h1>
      <br />
      <input v-model="var6" placeholder="Channel" />
      <br />
      <button @click="createChannel()">Create Channel</button>
      <button @click="setChannel()">Join Channel Id</button>
      <h1>Channel list</h1>
      <ul id="channellist"></ul>
      <h1>Chat</h1>
      <ul id="messagelist"></ul>
      <input v-model="var7" placeholder="text" />
      <button @click="sendMessage()">Send</button>
    </div>

    <script src="https://unpkg.com/vue@next"></script>

    <script type="module">
      let channel = "";
      let userid = "";
      import { createApp } from "vue";
      import VueCookies from "vue3-cookies";
      import qs from "https://cdn.skypack.dev/qs";

      const app = Vue.createApp({
        data() {
          return {
            hasil: "",
          };
        },
        methods: {
          async login() {
            try {
              console.log(this.var1, this.var2);
              const req = await fetch("http://localhost:3000/api/users/login", {
                method: "POST",
                credentials: "include",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  email: this.var1,
                  password: this.var2,
                }),
              });
              const data = await req.json();
              console.log(data);
              userid = data.user.id;
              this.readChannel();
              if (data.token) {
                this.$cookies.set("login", data.token, "1d");
              }
              this.hasil = data;
            } catch (err) {
              console.log(err);
            }
          },

          async logout() {
            try {
              const req = await fetch(
                "http://localhost:3000/api/users/logout",
                {
                  method: "POST",
                  credentials: "include",
                  headers: {
                    "Content-Type": "application/json",
                  },
                }
              );
              const data = await req.json();
              console.log(data);
              this.hasil = data;
              userid = "";
              document.getElementById("messagelist").innerHTML = "";
              document.getElementById("channellist").innerHTML = "";
            } catch (err) {
              console.log(err);
              userid = "";
              document.getElementById("messagelist").innerHTML = "";
              document.getElementById("channellist").innerHTML = "";
            }
          },

          async readChannel() {
            try {
              const req = await fetch("http://localhost:3000/api/channel");
              const data = await req.json();
              // console.log(data);
              this.hasil = data;
              const channellist = document.getElementById("channellist");
              channellist.innerHTML = "";

              if (data.docs && Array.isArray(data.docs)) {
                const reversedDocs = data.docs.slice().reverse();

                reversedDocs.forEach((item) => {
                  const li = document.createElement("li");
                  li.textContent = item.name + " " + item.id;
                  channellist.appendChild(li);
                });
              }
            } catch (err) {
              console.log(err);
            }
          },

          async createChannel() {
            try {
              const req = await fetch("http://localhost:3000/api/channel", {
                method: "POST",
                credentials: "include",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  name: this.var6,
                }),
              });
              const data = await req.json();
              console.log(data);
              this.hasil = data;
              this.readChannel();
            } catch (err) {
              console.log(err);
            }
          },

          setChannel() {
            channel = this.var6;
            console.log(channel);
            this.showMessage();
          },

          async showMessage() {
            try {
              const req = await fetch("http://localhost:3000/api/message");
              const data = await req.json();
              console.log(data);
              this.hasil = data;
              const messageList = document.getElementById("messagelist");
              messageList.innerHTML = "";

              if (data.docs && Array.isArray(data.docs)) {
                const reversedDocs = data.docs.slice().reverse();

                reversedDocs.forEach((item) => {
                  console.log(item);
                  if (item.channel.id == channel) {
                    const li = document.createElement("li");
                    li.textContent = item.sender.name + " : " + item.text;
                    messageList.appendChild(li);
                  }
                });
              }
            } catch (err) {
              console.log(err);
            }
          },

          async sendMessage() {
            try {
              const req = await fetch("http://localhost:3000/api/message", {
                method: "POST",
                credentials: "include",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  text: this.var7,
                  sender: userid,
                  channel: channel,
                }),
              });
              const data = await req.json();
              console.log(userid, channel);
              console.log(data);
              this.hasil = data;
              this.showMessage();
            } catch (err) {
              console.log(err);
            }
          },
        },
      });
      app.use(VueCookies, { expire: "1d" });
      app.mount("#app");
    </script>
  </body>
  <style>
    ul {
      list-style-type: none;
    }
  </style>
</html>

